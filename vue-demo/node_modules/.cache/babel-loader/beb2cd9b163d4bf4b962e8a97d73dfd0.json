{"remainingRequest":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/babel-loader/lib/index.js!/Volumes/Data/Projects/pilot/vue-demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/Projects/pilot/vue-demo/src/cui-components/CuiVueDropzone.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Data/Projects/pilot/vue-demo/src/cui-components/CuiVueDropzone.vue","mtime":1548946280000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport vue2Dropzone from 'vue2-dropzone';\nexport default {\n  components: {\n    vueDropzone: vue2Dropzone\n  },\n  data: function data() {\n    return {\n      dropzoneOptions: {\n        url: '/upload',\n        parallelUploads: 2,\n        maxFilesize: 50000,\n        filesizeBase: 1000,\n        addRemoveLinks: true,\n        dictDefaultMessage: \"\\nDrop files here or click to upload<br>\\n<span class=\\\"text-light small\\\">(This is just a demo dropzone. Selected files are <strong>not</strong> actually uploaded.)</span>\\n      \",\n        previewTemplate: \"\\n<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-thumbnail\\\">\\n      <img data-dz-thumbnail>\\n      <span class=\\\"dz-nopreview\\\">No preview</span>\\n      <div class=\\\"dz-success-mark\\\"></div>\\n      <div class=\\\"dz-error-mark\\\"></div>\\n      <div class=\\\"dz-error-message\\\"><span data-dz-errormessage></span></div>\\n      <div class=\\\"progress\\\"><div class=\\\"progress-bar progress-bar-primary\\\" role=\\\"progressbar\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" data-dz-uploadprogress></div></div>\\n    </div>\\n    <div class=\\\"dz-filename\\\" data-dz-name></div>\\n    <div class=\\\"dz-size\\\" data-dz-size></div>\\n  </div>\\n</div>\"\n      }\n    };\n  },\n  // ***************************************************************************\n  // Mock the file upload progress (only for the demo)\n  //\n  mounted: function mounted() {\n    if (typeof document.documentMode === 'number' && document.documentMode < 11) return;\n    var dropzoneInstance = this.$refs.dropzoneInstance.dropzone;\n\n    dropzoneInstance.uploadFiles = function (files) {\n      var _this = this;\n\n      var minSteps = 6;\n      var maxSteps = 60;\n      var timeBetweenSteps = 100;\n      var bytesPerStep = 100000;\n      var isUploadSuccess = Math.round(Math.random());\n\n      for (var i = 0; i < files.length; i++) {\n        var file = files[i];\n        var totalSteps = Math.round(Math.min(maxSteps, Math.max(minSteps, file.size / bytesPerStep)));\n\n        for (var step = 0; step < totalSteps; step++) {\n          var duration = timeBetweenSteps * (step + 1);\n          setTimeout(function (file, totalSteps, step) {\n            return function () {\n              file.upload = {\n                progress: 100 * (step + 1) / totalSteps,\n                total: file.size,\n                bytesSent: (step + 1) * file.size / totalSteps\n              };\n\n              _this.emit('uploadprogress', file, file.upload.progress, file.upload.bytesSent);\n\n              if (file.upload.progress === 100) {\n                if (isUploadSuccess) {\n                  file.status = dropzoneInstance.DZ_SUCCESS;\n\n                  _this.emit('success', file, 'success', null);\n                } else {\n                  file.status = dropzoneInstance.DZ_ERROR;\n\n                  _this.emit('error', file, 'Some upload error', null);\n                }\n\n                _this.emit('complete', file);\n\n                _this.processQueue();\n              }\n            };\n          }(file, totalSteps, step), duration);\n        }\n      }\n    };\n  }\n};",{"version":3,"sources":["CuiVueDropzone.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"ui-block\">\n    <h3 class=\"ui-block-heading\">vue-dropzone</h3>\n    <a target=\"_blank\" href=\"https://github.com/rowanwins/vue-dropzone\" class=\"ui-block-description\">https://github.com/rowanwins/vue-dropzone</a>\n\n    <div class=\"no-ie10 no-message\">\n      In Internet Explorer 10 and below <strong>vue-dropzone</strong> fails on initialization\n      after page refresh.\n    </div>\n\n    <h4 class=\"ui-block-heading\">Examples</h4>\n\n    <div class=\"cui-example\">\n      <vue-dropzone id=\"my-dropzone\" :options=\"dropzoneOptions\" ref=\"dropzoneInstance\" />\n    </div>\n  </div>\n</template>\n\n<style src=\"@/vendor/libs/vue-dropzone/vue-dropzone.scss\" lang=\"scss\"></style>\n\n<script>\nimport vue2Dropzone from 'vue2-dropzone'\n\nexport default {\n  components: {\n    vueDropzone: vue2Dropzone\n  },\n  data: () => ({\n    dropzoneOptions: {\n      url: '/upload',\n      parallelUploads: 2,\n      maxFilesize: 50000,\n      filesizeBase: 1000,\n      addRemoveLinks: true,\n      dictDefaultMessage: `\nDrop files here or click to upload<br>\n<span class=\"text-light small\">(This is just a demo dropzone. Selected files are <strong>not</strong> actually uploaded.)</span>\n      `,\n      previewTemplate: `\n<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-details\">\n    <div class=\"dz-thumbnail\">\n      <img data-dz-thumbnail>\n      <span class=\"dz-nopreview\">No preview</span>\n      <div class=\"dz-success-mark\"></div>\n      <div class=\"dz-error-mark\"></div>\n      <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n      <div class=\"progress\"><div class=\"progress-bar progress-bar-primary\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" data-dz-uploadprogress></div></div>\n    </div>\n    <div class=\"dz-filename\" data-dz-name></div>\n    <div class=\"dz-size\" data-dz-size></div>\n  </div>\n</div>`\n    }\n  }),\n\n  // ***************************************************************************\n  // Mock the file upload progress (only for the demo)\n  //\n\n  mounted () {\n    if (typeof document.documentMode === 'number' && document.documentMode < 11) return\n\n    const dropzoneInstance = this.$refs.dropzoneInstance.dropzone\n\n    dropzoneInstance.uploadFiles = function (files) {\n      const minSteps = 6\n      const maxSteps = 60\n      const timeBetweenSteps = 100\n      const bytesPerStep = 100000\n      const isUploadSuccess = Math.round(Math.random())\n\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i]\n        const totalSteps = Math.round(Math.min(maxSteps, Math.max(minSteps, file.size / bytesPerStep)))\n\n        for (let step = 0; step < totalSteps; step++) {\n          const duration = timeBetweenSteps * (step + 1)\n\n          setTimeout(((file, totalSteps, step) => {\n            return () => {\n              file.upload = {\n                progress: 100 * (step + 1) / totalSteps,\n                total: file.size,\n                bytesSent: (step + 1) * file.size / totalSteps\n              }\n\n              this.emit('uploadprogress', file, file.upload.progress, file.upload.bytesSent)\n\n              if (file.upload.progress === 100) {\n                if (isUploadSuccess) {\n                  file.status = dropzoneInstance.DZ_SUCCESS\n                  this.emit('success', file, 'success', null)\n                } else {\n                  file.status = dropzoneInstance.DZ_ERROR\n                  this.emit('error', file, 'Some upload error', null)\n                }\n\n                this.emit('complete', file)\n                this.processQueue()\n              }\n            }\n          })(file, totalSteps, step), duration)\n        }\n      }\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/cui-components"}]}