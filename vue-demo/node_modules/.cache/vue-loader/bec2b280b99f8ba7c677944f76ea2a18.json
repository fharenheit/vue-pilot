{"remainingRequest":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/Projects/pilot/vue-demo/src/components/forms/FileUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Data/Projects/pilot/vue-demo/src/components/forms/FileUpload.vue","mtime":1548946280000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport vue2Dropzone from 'vue2-dropzone'\nimport Vue from 'vue'\nimport VueUploadComponent from 'vue-upload-component'\n\nVue.filter('fileSize', function (value) {\n  if (!value) return ''\n  const parts = String(value).split('.')\n  return `${parts[0]}.${parts[1].slice(0, 2)}`\n})\n\nexport default {\n  name: 'forms-file-upload',\n  metaInfo: {\n    title: 'File upload - Forms'\n  },\n  components: {\n    vueDropzone: vue2Dropzone,\n    FileUpload: VueUploadComponent\n  },\n  data: () => ({\n    //\n    // Dropzone\n    //\n\n    dropzoneOptions: {\n      url: '/upload',\n      parallelUploads: 2,\n      maxFilesize: 50000,\n      filesizeBase: 1000,\n      addRemoveLinks: true,\n      dictDefaultMessage: `\nDrop files here or click to upload<br>\n<span class=\"text-light small\">(This is just a demo dropzone. Selected files are <strong>not</strong> actually uploaded.)</span>\n      `,\n      previewTemplate: `\n<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-details\">\n    <div class=\"dz-thumbnail\">\n      <img data-dz-thumbnail>\n      <span class=\"dz-nopreview\">No preview</span>\n      <div class=\"dz-success-mark\"></div>\n      <div class=\"dz-error-mark\"></div>\n      <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n      <div class=\"progress\"><div class=\"progress-bar progress-bar-primary\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" data-dz-uploadprogress></div></div>\n    </div>\n    <div class=\"dz-filename\" data-dz-name></div>\n    <div class=\"dz-size\" data-dz-size></div>\n  </div>\n</div>`\n    },\n\n    //\n    // Vue Upload Component\n    //\n\n    files: [],\n    name: 'file',\n    accept: 'image/png,image/gif,image/jpeg,image/webp',\n    extensions: 'gif,jpg,jpeg,png,webp',\n    // extensions: ['gif', 'jpg', 'jpeg','png', 'webp'],\n    // extensions: /\\.(gif|jpe?g|png|webp)$/i,\n    minSize: 1024,\n    size: 1024 * 1024 * 10,\n    multiple: true,\n    directory: false,\n    drop: true,\n    dropDirectory: true,\n    addIndex: false,\n    thread: 3,\n    postAction: 'https://evening-anchorage-3159.herokuapp.com/api/'\n  }),\n\n  // ***************************************************************************\n  // Dropzone:: Mock the file upload progress (only for the demo)\n  //\n\n  mounted () {\n    if (typeof document.documentMode === 'number' && document.documentMode < 11) return\n\n    const dropzoneInstance = this.$refs.dropzoneInstance.dropzone\n\n    dropzoneInstance.uploadFiles = function (files) {\n      const minSteps = 6\n      const maxSteps = 60\n      const timeBetweenSteps = 100\n      const bytesPerStep = 100000\n      const isUploadSuccess = Math.round(Math.random())\n\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i]\n        const totalSteps = Math.round(Math.min(maxSteps, Math.max(minSteps, file.size / bytesPerStep)))\n\n        for (let step = 0; step < totalSteps; step++) {\n          const duration = timeBetweenSteps * (step + 1)\n\n          setTimeout(((file, totalSteps, step) => {\n            return () => {\n              file.upload = {\n                progress: 100 * (step + 1) / totalSteps,\n                total: file.size,\n                bytesSent: (step + 1) * file.size / totalSteps\n              }\n\n              this.emit('uploadprogress', file, file.upload.progress, file.upload.bytesSent)\n\n              if (file.upload.progress === 100) {\n                if (isUploadSuccess) {\n                  file.status = dropzoneInstance.DZ_SUCCESS\n                  this.emit('success', file, 'success', null)\n                } else {\n                  file.status = dropzoneInstance.DZ_ERROR\n                  this.emit('error', file, 'Some upload error', null)\n                }\n\n                this.emit('complete', file)\n                this.processQueue()\n              }\n            }\n          })(file, totalSteps, step), duration)\n        }\n      }\n    }\n  },\n  methods: {\n    //\n    // Vue Upload Component\n    //\n\n    inputFilter (newFile, oldFile, prevent) {\n      if (newFile && !oldFile) {\n        // Before adding a file\n        // Filter system files or hide files\n        if (/(\\/|^)(Thumbs\\.db|desktop\\.ini|\\..+)$/.test(newFile.name)) {\n          return prevent()\n        }\n        // Filter php html js file\n        if (/\\.(php5?|html?|jsx?)$/i.test(newFile.name)) {\n          return prevent()\n        }\n      }\n      if (newFile && (!oldFile || newFile.file !== oldFile.file)) {\n        // Create a blob field\n        newFile.blob = ''\n        let URL = window.URL || window.webkitURL\n        if (URL && URL.createObjectURL) {\n          newFile.blob = URL.createObjectURL(newFile.file)\n        }\n        // Thumbnails\n        newFile.thumb = ''\n        if (newFile.blob && newFile.type.substr(0, 6) === 'image/') {\n          newFile.thumb = newFile.blob\n        }\n      }\n    },\n    // add, update, remove File Event\n    inputFile (newFile, oldFile) {\n      if (newFile && oldFile) {\n        // update\n        if (newFile.active && !oldFile.active) {\n          // beforeSend\n          // min size\n          if (newFile.size >= 0 && this.minSize > 0 && newFile.size < this.minSize) {\n            this.$refs.upload.update(newFile, { error: 'size' })\n          }\n        }\n      }\n    },\n    // add folader\n    onAddFolder () {\n      if (!this.$refs.upload.features.directory) {\n        alert('Your browser does not support')\n        return\n      }\n      let input = this.$refs.upload.$el.querySelector('input')\n      input.directory = true\n      input.webkitdirectory = true\n      this.directory = true\n      input.onclick = null\n      input.click()\n      input.onclick = (e) => {\n        this.directory = false\n        input.directory = false\n        input.webkitdirectory = false\n      }\n    }\n  }\n}\n",{"version":3,"sources":["FileUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FileUpload.vue","sourceRoot":"src/components/forms","sourcesContent":["<template>\n  <div>\n    <h4 class=\"font-weight-bold py-3 mb-4\">\n      <span class=\"text-muted font-weight-light\">Forms /</span> File upload\n    </h4>\n\n    <b-card header=\"Vue Dropzone\" header-tag=\"h6\" class=\"mb-4\">\n      <vue-dropzone id=\"my-dropzone\" :options=\"dropzoneOptions\" ref=\"dropzoneInstance\" />\n    </b-card>\n\n    <b-card header=\"Vue Upload Component\" header-tag=\"h6\" class=\"mb-4\">\n      <file-upload class=\"sr-only\"\n        :name=\"name\"\n        :post-action=\"postAction\"\n        :extensions=\"extensions\"\n        :accept=\"accept\"\n        :multiple=\"multiple\"\n        :directory=\"directory\"\n        :size=\"size || 0\"\n        :thread=\"thread < 1 ? 1 : (thread > 5 ? 5 : thread)\"\n        :drop=\"drop\"\n        :drop-directory=\"dropDirectory\"\n        :add-index=\"addIndex\"\n        v-model=\"files\"\n        @input-filter=\"inputFilter\"\n        @input-file=\"inputFile\"\n        ref=\"upload\" />\n\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Thumb</th>\n              <th>Name</th>\n              <th>Size</th>\n              <th>Speed</th>\n              <th>Status</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-if=\"!files.length\">\n              <td colspan=\"7\">\n                <div class=\"text-center p-5\">\n                  <h4>Drop files anywhere to upload <div class=\"text-muted small my-3\">or</div></h4>\n                  <label :for=\"name\" class=\"btn btn-primary btn-lg\">Select Files</label>\n                </div>\n              </td>\n            </tr>\n            <tr v-for=\"(file, index) in files\" :key=\"file.id\">\n              <td>{{index}}</td>\n              <td>\n                <img v-if=\"file.thumb\" :src=\"file.thumb\" width=\"40\" height=\"auto\" />\n                <span v-else>No Image</span>\n              </td>\n              <td>\n                <div class=\"filename\">\n                  {{file.name}}\n                </div>\n                <b-progress :value=\"Number(file.progress)\" :variant=\"file.error ? 'danger' : ''\" :animated=\"file.active\" v-if=\"file.active || file.progress !== '0.00'\" height=\"6px\" style=\"margin: 4px 0 0 0\" />\n              </td>\n              <td>{{ file.size/1024/1024 | fileSize }} MB</td>\n              <td>{{file.speed}}</td>\n\n              <td v-if=\"file.error\">{{file.error}}</td>\n              <td v-else-if=\"file.success\">success</td>\n              <td v-else-if=\"file.active\">active</td>\n              <td v-else></td>\n              <td>\n                <b-dd text=\"Action\" size=\"sm\" :right=\"!isRTL\">\n                  <b-dd-item :disabled=\"!file.active\" @click=\"file.active ? $refs.upload.update(file, {error: 'cancel'}) : false\">Cancel</b-dd-item>\n\n                  <b-dd-item v-if=\"file.active\" @click=\"$refs.upload.update(file, {active: false})\">Abort</b-dd-item>\n                  <b-dd-item v-else-if=\"file.error && $refs.upload.features.html5\" @click=\"$refs.upload.update(file, {active: true, error: '', progress: '0.00'})\">Retry upload</b-dd-item>\n                  <b-dd-item v-else :disabled=\"file.success\" @click=\"file.success ? false : $refs.upload.update(file, {active: true})\">Upload</b-dd-item>\n\n                  <b-dd-divider />\n\n                  <b-dd-item @click=\"$refs.upload.remove(file)\">Remove</b-dd-item>\n                </b-dd>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <b-dd split :right=\"isRTL\" @click=\"$refs.upload.$el.querySelector('input').click()\">\n        <template slot=\"button-content\">\n          <i class=\"ion ion-md-add\"></i> Add files\n        </template>\n        <b-dd-item @click=\"onAddFolder\">Add folder</b-dd-item>\n      </b-dd>\n      <b-btn v-if=\"!$refs.upload || !$refs.upload.active\" @click=\"$refs.upload.active = true\" variant=\"success\">\n        <i class=\"ion ion-md-arrow-up\" aria-hidden=\"true\"></i> Start Upload\n      </b-btn>\n      <b-btn v-else @click=\"$refs.upload.active = false\" variant=\"danger\">\n        <i class=\"ion ion-md-close\" aria-hidden=\"true\"></i> Stop Upload\n      </b-btn>\n    </b-card>\n\n  </div>\n</template>\n\n<style src=\"@/vendor/libs/vue-dropzone/vue-dropzone.scss\" lang=\"scss\"></style>\n\n<script>\nimport vue2Dropzone from 'vue2-dropzone'\nimport Vue from 'vue'\nimport VueUploadComponent from 'vue-upload-component'\n\nVue.filter('fileSize', function (value) {\n  if (!value) return ''\n  const parts = String(value).split('.')\n  return `${parts[0]}.${parts[1].slice(0, 2)}`\n})\n\nexport default {\n  name: 'forms-file-upload',\n  metaInfo: {\n    title: 'File upload - Forms'\n  },\n  components: {\n    vueDropzone: vue2Dropzone,\n    FileUpload: VueUploadComponent\n  },\n  data: () => ({\n    //\n    // Dropzone\n    //\n\n    dropzoneOptions: {\n      url: '/upload',\n      parallelUploads: 2,\n      maxFilesize: 50000,\n      filesizeBase: 1000,\n      addRemoveLinks: true,\n      dictDefaultMessage: `\nDrop files here or click to upload<br>\n<span class=\"text-light small\">(This is just a demo dropzone. Selected files are <strong>not</strong> actually uploaded.)</span>\n      `,\n      previewTemplate: `\n<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-details\">\n    <div class=\"dz-thumbnail\">\n      <img data-dz-thumbnail>\n      <span class=\"dz-nopreview\">No preview</span>\n      <div class=\"dz-success-mark\"></div>\n      <div class=\"dz-error-mark\"></div>\n      <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n      <div class=\"progress\"><div class=\"progress-bar progress-bar-primary\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"100\" data-dz-uploadprogress></div></div>\n    </div>\n    <div class=\"dz-filename\" data-dz-name></div>\n    <div class=\"dz-size\" data-dz-size></div>\n  </div>\n</div>`\n    },\n\n    //\n    // Vue Upload Component\n    //\n\n    files: [],\n    name: 'file',\n    accept: 'image/png,image/gif,image/jpeg,image/webp',\n    extensions: 'gif,jpg,jpeg,png,webp',\n    // extensions: ['gif', 'jpg', 'jpeg','png', 'webp'],\n    // extensions: /\\.(gif|jpe?g|png|webp)$/i,\n    minSize: 1024,\n    size: 1024 * 1024 * 10,\n    multiple: true,\n    directory: false,\n    drop: true,\n    dropDirectory: true,\n    addIndex: false,\n    thread: 3,\n    postAction: 'https://evening-anchorage-3159.herokuapp.com/api/'\n  }),\n\n  // ***************************************************************************\n  // Dropzone:: Mock the file upload progress (only for the demo)\n  //\n\n  mounted () {\n    if (typeof document.documentMode === 'number' && document.documentMode < 11) return\n\n    const dropzoneInstance = this.$refs.dropzoneInstance.dropzone\n\n    dropzoneInstance.uploadFiles = function (files) {\n      const minSteps = 6\n      const maxSteps = 60\n      const timeBetweenSteps = 100\n      const bytesPerStep = 100000\n      const isUploadSuccess = Math.round(Math.random())\n\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i]\n        const totalSteps = Math.round(Math.min(maxSteps, Math.max(minSteps, file.size / bytesPerStep)))\n\n        for (let step = 0; step < totalSteps; step++) {\n          const duration = timeBetweenSteps * (step + 1)\n\n          setTimeout(((file, totalSteps, step) => {\n            return () => {\n              file.upload = {\n                progress: 100 * (step + 1) / totalSteps,\n                total: file.size,\n                bytesSent: (step + 1) * file.size / totalSteps\n              }\n\n              this.emit('uploadprogress', file, file.upload.progress, file.upload.bytesSent)\n\n              if (file.upload.progress === 100) {\n                if (isUploadSuccess) {\n                  file.status = dropzoneInstance.DZ_SUCCESS\n                  this.emit('success', file, 'success', null)\n                } else {\n                  file.status = dropzoneInstance.DZ_ERROR\n                  this.emit('error', file, 'Some upload error', null)\n                }\n\n                this.emit('complete', file)\n                this.processQueue()\n              }\n            }\n          })(file, totalSteps, step), duration)\n        }\n      }\n    }\n  },\n  methods: {\n    //\n    // Vue Upload Component\n    //\n\n    inputFilter (newFile, oldFile, prevent) {\n      if (newFile && !oldFile) {\n        // Before adding a file\n        // Filter system files or hide files\n        if (/(\\/|^)(Thumbs\\.db|desktop\\.ini|\\..+)$/.test(newFile.name)) {\n          return prevent()\n        }\n        // Filter php html js file\n        if (/\\.(php5?|html?|jsx?)$/i.test(newFile.name)) {\n          return prevent()\n        }\n      }\n      if (newFile && (!oldFile || newFile.file !== oldFile.file)) {\n        // Create a blob field\n        newFile.blob = ''\n        let URL = window.URL || window.webkitURL\n        if (URL && URL.createObjectURL) {\n          newFile.blob = URL.createObjectURL(newFile.file)\n        }\n        // Thumbnails\n        newFile.thumb = ''\n        if (newFile.blob && newFile.type.substr(0, 6) === 'image/') {\n          newFile.thumb = newFile.blob\n        }\n      }\n    },\n    // add, update, remove File Event\n    inputFile (newFile, oldFile) {\n      if (newFile && oldFile) {\n        // update\n        if (newFile.active && !oldFile.active) {\n          // beforeSend\n          // min size\n          if (newFile.size >= 0 && this.minSize > 0 && newFile.size < this.minSize) {\n            this.$refs.upload.update(newFile, { error: 'size' })\n          }\n        }\n      }\n    },\n    // add folader\n    onAddFolder () {\n      if (!this.$refs.upload.features.directory) {\n        alert('Your browser does not support')\n        return\n      }\n      let input = this.$refs.upload.$el.querySelector('input')\n      input.directory = true\n      input.webkitdirectory = true\n      this.directory = true\n      input.onclick = null\n      input.click()\n      input.onclick = (e) => {\n        this.directory = false\n        input.directory = false\n        input.webkitdirectory = false\n      }\n    }\n  }\n}\n</script>\n"]}]}