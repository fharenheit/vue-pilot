{"remainingRequest":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/Projects/pilot/vue-demo/src/components/ui/DragAndDrop.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"/Volumes/Data/Projects/pilot/vue-demo/src/components/ui/DragAndDrop.vue","mtime":1548946280000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.dragula-example {\n  margin-bottom: 6px;\n}\n\n.sortable-example {\n  margin: 0;\n  padding: 0;\n}\n.sortable-example li {\n  padding: 6px 10px;\n  margin-bottom: 8px;\n  list-style: none;\n}\n.sortable-example-inline li {\n  margin-right: 8px;\n  display: inline-block;\n}\n[dir=rtl] .sortable-example-inline li {\n  margin-right: 0;\n  margin-left: 8px;\n}\n\n.sortable-example-3 {\n  width: 220px;\n}\n.sortable-example-3 img {\n  margin-right: 8px;\n  margin-bottom: 8px;\n  width: 100px;\n  height: 100px;\n  border-radius: 999px;\n  display: block;\n  float: left;\n}\n[dir=rtl] .sortable-example-3 img {\n  margin-right: 0;\n  margin-left: 8px;\n  float: right;\n}\n",{"version":3,"sources":["DragAndDrop.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DragAndDrop.vue","sourceRoot":"src/components/ui","sourcesContent":["<template>\n  <div>\n    <h4 class=\"font-weight-bold py-3 mb-4\">\n      <span class=\"text-muted font-weight-light\">UI elements /</span> Drag&amp;Drop\n    </h4>\n\n    <hr class=\"border-light container-m--x mt-0\">\n\n    <h5 class=\"font-weight-bold pt-1 pb-1 mt-4 mb-4\">Vue Dragula</h5>\n\n    <div class=\"row\">\n      <div v-dragula bag=\"first-bag\" class=\"col\">\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            You can move these elements between these two containers\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            Moving them anywhere else isn't quite possible\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            Anything can be moved around. That includes images, <a href='https://github.com/bevacqua/dragula'>links</a>, or any other nested elements.\n            <img :src=\"`${baseUrl}img/bg/4.jpg`\" alt=\"\" class=\"w-100 my-3\">\n            <sub>(You can still click on links, as usual!)</sub>\n          </div>\n        </div>\n      </div>\n      <div v-dragula bag=\"first-bag\" class=\"col\">\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            There's also the possibility of moving elements around in the same container, changing their position\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            This is the default use case. You only need to specify the containers you want to use\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            More interactive use cases lie ahead\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            <p>Moving <code>&lt;input/&gt;</code> elements works just fine. You can still focus them, too.</p>\n            <input placeholder='See?' class=\"form-control\">\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            Make sure to check out the <a href='https://github.com/bevacqua/dragula#readme'>documentation on GitHub!</a>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <h6 class=\"pb-1 mt-5 mb-4\">Copying</h6>\n\n    <div class=\"row\" style=\"margin-top:0 !important\">\n      <div v-dragula bag=\"second-bag\" class=\"col-6\">\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            When elements are copyable, they can't be sorted in their origin container\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            Copying prevents original elements from being dragged. A copy gets created and <em>that</em> gets dragged instead\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            Whenever that happens, a <code>cloned</code> event is raised\n          </div>\n        </div>\n      </div>\n      <div v-dragula bag=\"second-bag\" class=\"col-6\">\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            Note that the clones get destroyed if they're not dropped into another container\n          </div>\n        </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            You'll be dragging a copy, so when they're dropped into another container you'll see the duplication.\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <h6 class=\"pb-1 mt-5 mb-4\">Drag handle</h6>\n\n    <div class=\"row\" style=\"margin-top:0 !important\">\n      <div v-dragula bag=\"third-bag\" class=\"col-6\">\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            <span class=\"handle ion ion-ios-move d-inline-block bg-primary text-white p-2 mr-2 mb-1\"></span>Move me, but you can use the plus sign to drag me around.</div>\n          </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            <span class=\"handle ion ion-ios-move d-inline-block bg-primary text-white p-2 mr-2 mb-1\"></span>Note that <code>handle</code> element in the <code>moves</code> handler is just the original event target.</div>\n          </div>\n      </div>\n      <div v-dragula bag=\"third-bag\" class=\"col-6\">\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            <span class=\"handle ion ion-ios-move d-inline-block bg-primary text-white p-2 mr-2 mb-1\"></span>This might also be useful if you want multiple children of an element to be able to trigger a drag event.</div>\n          </div>\n        <div class=\"dragula-example card card-condenced\">\n          <div class=\"card-body\">\n            <span class=\"handle ion ion-ios-move d-inline-block bg-primary text-white p-2 mr-2 mb-1\"></span>You can also use the <code>moves</code> option to determine whether an element can be dragged at all from a container, <em>drag handle or not</em>.</div>\n          </div>\n      </div>\n    </div>\n\n    <hr class=\"border-light container-m--x mt-5\">\n\n    <h5 class=\"font-weight-bold pt-1 pb-1 mt-4 mb-4\">Vuedraggable (Sortable.js)</h5>\n\n    <draggable v-model=\"items\" :options=\"{animation: 150}\" element=\"ul\" class=\"sortable-example mb-5\">\n      <li v-for=\"item in items\" :key=\"item\" style=\"background: #f3f3f3;\">{{ item }}</li>\n    </draggable>\n\n    <draggable v-model=\"items\" :options=\"{animation: 150}\" element=\"ul\" class=\"sortable-example sortable-example-inline mb-5\">\n      <li v-for=\"item in items\" :key=\"item\" style=\"background: #f3f3f3;\">{{ item }}</li>\n    </draggable>\n\n    <draggable v-model=\"imageUrls\" :options=\"{animation: 150}\" class=\"sortable-example-3 mb-5 clearfix\">\n      <img v-for=\"img in imageUrls\" :key=\"img\" :src=\"img\" alt=\"\">\n    </draggable>\n\n    <draggable v-model=\"items\" :options=\"{animation: 150, handle: '.ion'}\" element=\"ul\" class=\"sortable-example\">\n      <li v-for=\"item in items\" :key=\"item\" style=\"background: #f3f3f3;\">\n        <i class=\"ion ion-ios-move m-r-1\"></i>&nbsp; {{ item }}\n      </li>\n    </draggable>\n  </div>\n</template>\n\n<style src=\"vue-dragula/styles/dragula.css\" />\n\n<style>\n  .dragula-example {\n    margin-bottom: 6px;\n  }\n\n  .sortable-example {\n    margin: 0;\n    padding: 0;\n  }\n  .sortable-example li {\n    padding: 6px 10px;\n    margin-bottom: 8px;\n    list-style: none;\n  }\n  .sortable-example-inline li {\n    margin-right: 8px;\n    display: inline-block;\n  }\n  [dir=rtl] .sortable-example-inline li {\n    margin-right: 0;\n    margin-left: 8px;\n  }\n\n  .sortable-example-3 {\n    width: 220px;\n  }\n  .sortable-example-3 img {\n    margin-right: 8px;\n    margin-bottom: 8px;\n    width: 100px;\n    height: 100px;\n    border-radius: 999px;\n    display: block;\n    float: left;\n  }\n  [dir=rtl] .sortable-example-3 img {\n    margin-right: 0;\n    margin-left: 8px;\n    float: right;\n  }\n</style>\n\n<script>\nimport Vue from 'vue'\nimport VueDragula from 'vue-dragula'\nimport draggable from 'vuedraggable'\n\nVue.use(VueDragula)\n\nexport default {\n  name: 'ui-drag-and-drop',\n  metaInfo: {\n    title: 'Drag&Drop - UI elements'\n  },\n  components: {\n    draggable\n  },\n  data: () => ({\n    //\n    // Vuedraggable\n    //\n\n    items: ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'],\n    images: [\n      'img/avatars/1.png',\n      'img/avatars/2.png',\n      'img/avatars/3.png',\n      'img/avatars/4.png'\n    ]\n  }),\n  created () {\n    Vue.vueDragula.options('second-bag', {\n      copy: true\n    })\n    Vue.vueDragula.options('third-bag', {\n      moves (el, container, handle) {\n        return handle.classList.contains('handle')\n      }\n    })\n  },\n  computed: {\n    imageUrls: {\n      get () {\n        return this.images.map(i => this.baseUrl + i)\n      },\n      set (v) {\n        this.images = v.map(i => i.replace(new RegExp(`^${this.baseUrl}`), ''))\n      }\n    }\n  }\n}\n</script>\n"]}]}