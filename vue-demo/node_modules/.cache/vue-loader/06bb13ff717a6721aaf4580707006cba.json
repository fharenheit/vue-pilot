{"remainingRequest":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Data/Projects/pilot/vue-demo/src/cui-components/CuiVueCropper.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Data/Projects/pilot/vue-demo/src/cui-components/CuiVueCropper.vue","mtime":1548946280000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Data/Projects/pilot/vue-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport vueCropper from 'vue-cropper/src/vue-cropper'\n\nexport default {\n  components: {\n    vueCropper\n  },\n  data: () => ({\n    image: null,\n    outputSize: 1,\n    outputType: 'jpeg',\n    previews: {},\n    cropping: false,\n    previewData: null,\n    previewOpened: false\n  }),\n  mounted () {\n    this.image = `${this.baseUrl}img/bg/13.jpg`\n  },\n  methods: {\n    startCrop () {\n      this.cropping = true\n      this.$refs.cropper.startCrop()\n    },\n\n    stopCrop () {\n      this.cropping = false\n      this.$refs.cropper.stopCrop()\n    },\n\n    clearCrop () {\n      this.$refs.cropper.clearCrop()\n    },\n\n    changeScale (num) {\n      this.$refs.cropper.changeScale(num || 1)\n    },\n\n    rotateLeft () {\n      this.$refs.cropper.rotateLeft()\n    },\n\n    rotateRight () {\n      this.$refs.cropper.rotateRight()\n    },\n\n    realTimePreview (data) {\n      this.previews = data\n    },\n\n    previewImg (type) {\n      if (type === 'blob') {\n        this.$refs.cropper.getCropBlob((data) => {\n          var img = window.URL.createObjectURL(data)\n          this.previewData = img\n          this.previewOpened = true\n        })\n      } else {\n        this.$refs.cropper.getCropData((data) => {\n          this.previewData = data\n          this.previewOpened = true\n        })\n      }\n    },\n\n    downloadImg (type) {\n      var aLink = document.createElement('a')\n      aLink.download = 'demo'\n\n      if (type === 'blob') {\n        this.$refs.cropper.getCropBlob((data) => {\n          this.downloadImgData = window.URL.createObjectURL(data)\n          aLink.href = window.URL.createObjectURL(data)\n          aLink.click()\n        })\n      } else {\n        this.$refs.cropper.getCropData((data) => {\n          this.downloadImgData = data\n          aLink.href = data\n          aLink.click()\n        })\n      }\n    },\n\n    uploadImg (e) {\n      var file = e.target.files[0]\n      if (!/\\.(gif|jpg|jpeg|png|bmp|GIF|JPG|PNG)$/.test(e.target.value)) {\n        alert('Unknown image extension. Allowed extensions: gif, jpeg, jpg, png, bmp')\n        return false\n      }\n      var reader = new FileReader()\n      reader.onload = (e) => {\n        let data\n        if (typeof e.target.result === 'object') {\n          data = window.URL.createObjectURL(new Blob([e.target.result]))\n        } else {\n          data = e.target.result\n        }\n        this.image = data\n      }\n      reader.readAsArrayBuffer(file)\n    }\n  }\n}\n",{"version":3,"sources":["CuiVueCropper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CuiVueCropper.vue","sourceRoot":"src/cui-components","sourcesContent":["<template>\n  <div class=\"ui-block\">\n    <h3 class=\"ui-block-heading\">vue-cropper</h3>\n    <a target=\"_blank\" href=\"https://github.com/xyxiao001/vue-cropper\" class=\"ui-block-description\">https://github.com/xyxiao001/vue-cropper</a>\n\n    <h4 class=\"ui-block-heading\">Examples</h4>\n\n    <div class=\"cui-example\">\n      <b-modal v-model=\"previewOpened\" :ok-only=\"true\" ok-title=\"Close\" ok-variant=\"secondary\" :hide-header=\"true\">\n        <img :src=\"previewData\" alt=\"\" class=\"img-fluid d-block mx-auto\">\n      </b-modal>\n\n      <div class=\"mb-3\" :class=\"{ 'd-none': !image }\" style=\"height: 500px;\">\n        <vueCropper\n          ref=\"cropper\"\n          :img=\"image\"\n          :outputSize=\"outputSize\"\n          :outputType=\"outputType\"\n          :info=\"true\"\n          @realTime=\"realTimePreview\" />\n      </div>\n\n      <label class=\"btn btn-primary\" for=\"cropper-upload\">\n        <input class=\"sr-only\" type=\"file\" id=\"cropper-upload\" accept=\"image/png, image/jpeg, image/gif, image/jpg\" @change=\"uploadImg($event)\">\n        Upload\n      </label>\n\n      <b-btn @click=\"startCrop\" v-if=\"!cropping\" :disabled=\"!image\">Start cropping</b-btn>\n      <b-btn @click=\"stopCrop\" v-else :disabled=\"!image\">Stop cropping</b-btn>\n      <b-btn @click=\"clearCrop\" :disabled=\"!image\">Clear</b-btn>\n\n      <b-btn @click=\"changeScale(1)\" :disabled=\"!image\">+</b-btn>\n      <b-btn @click=\"changeScale(-1)\" :disabled=\"!image\">-</b-btn>\n\n      <b-btn @click=\"rotateLeft\" :disabled=\"!image\">rotateLeft</b-btn>\n      <b-btn @click=\"rotateRight\" :disabled=\"!image\">rotateRight</b-btn>\n\n      <b-btn @click=\"previewImg('base64')\" :disabled=\"!image\">Preview Base64</b-btn>\n      <b-btn @click=\"previewImg('blob')\" :disabled=\"!image\">Preview Blob</b-btn>\n\n      <b-btn @click=\"downloadImg('base64')\" :disabled=\"!image\">Download Base64</b-btn>\n      <b-btn @click=\"downloadImg('blob')\" :disabled=\"!image\">Download Blob</b-btn>\n\n      <b-form-group label=\"Output type\" class=\"mt-3\">\n        <b-radio-group v-model=\"outputType\" :disabled=\"!image\" :options=\"[{ text: 'jpeg', value: 'jpeg' }, { text: 'png', value: 'png' }, { text: 'webp', value: 'webp' }]\" />\n      </b-form-group>\n\n      <div :style=\"{'width': previews.w + 'px', 'height': previews.h + 'px', 'overflow': 'hidden', 'margin': '5px'}\">\n        <div :style=\"previews.div\">\n          <img :src=\"previews.url\" :style=\"previews.img\">\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport vueCropper from 'vue-cropper/src/vue-cropper'\n\nexport default {\n  components: {\n    vueCropper\n  },\n  data: () => ({\n    image: null,\n    outputSize: 1,\n    outputType: 'jpeg',\n    previews: {},\n    cropping: false,\n    previewData: null,\n    previewOpened: false\n  }),\n  mounted () {\n    this.image = `${this.baseUrl}img/bg/13.jpg`\n  },\n  methods: {\n    startCrop () {\n      this.cropping = true\n      this.$refs.cropper.startCrop()\n    },\n\n    stopCrop () {\n      this.cropping = false\n      this.$refs.cropper.stopCrop()\n    },\n\n    clearCrop () {\n      this.$refs.cropper.clearCrop()\n    },\n\n    changeScale (num) {\n      this.$refs.cropper.changeScale(num || 1)\n    },\n\n    rotateLeft () {\n      this.$refs.cropper.rotateLeft()\n    },\n\n    rotateRight () {\n      this.$refs.cropper.rotateRight()\n    },\n\n    realTimePreview (data) {\n      this.previews = data\n    },\n\n    previewImg (type) {\n      if (type === 'blob') {\n        this.$refs.cropper.getCropBlob((data) => {\n          var img = window.URL.createObjectURL(data)\n          this.previewData = img\n          this.previewOpened = true\n        })\n      } else {\n        this.$refs.cropper.getCropData((data) => {\n          this.previewData = data\n          this.previewOpened = true\n        })\n      }\n    },\n\n    downloadImg (type) {\n      var aLink = document.createElement('a')\n      aLink.download = 'demo'\n\n      if (type === 'blob') {\n        this.$refs.cropper.getCropBlob((data) => {\n          this.downloadImgData = window.URL.createObjectURL(data)\n          aLink.href = window.URL.createObjectURL(data)\n          aLink.click()\n        })\n      } else {\n        this.$refs.cropper.getCropData((data) => {\n          this.downloadImgData = data\n          aLink.href = data\n          aLink.click()\n        })\n      }\n    },\n\n    uploadImg (e) {\n      var file = e.target.files[0]\n      if (!/\\.(gif|jpg|jpeg|png|bmp|GIF|JPG|PNG)$/.test(e.target.value)) {\n        alert('Unknown image extension. Allowed extensions: gif, jpeg, jpg, png, bmp')\n        return false\n      }\n      var reader = new FileReader()\n      reader.onload = (e) => {\n        let data\n        if (typeof e.target.result === 'object') {\n          data = window.URL.createObjectURL(new Blob([e.target.result]))\n        } else {\n          data = e.target.result\n        }\n        this.image = data\n      }\n      reader.readAsArrayBuffer(file)\n    }\n  }\n}\n</script>\n"]}]}